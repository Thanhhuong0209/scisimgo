name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * *' # Run every day at 6 AM UTC
  workflow_dispatch:
    inputs:
      run_basic_checks:
        description: 'Run basic quality checks'
        required: false
        default: true
        type: boolean

env:
  COVERAGE_THRESHOLD: '80'

jobs:
  basic-quality:
    name: Basic Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file structure
      run: |
        echo "Checking project file structure..."
        echo "Current directory: $(pwd)"
        
        # Check for required directories
        for dir in cmd internal notebooks scripts; do
          if [ -d "$dir" ]; then
            echo "$dir/ directory found"
            echo "   Contents: $(ls -1 $dir | wc -l) files"
          else
            echo "$dir/ directory missing"
          fi
        done
        
        # Check for required files
        for file in README.md go.mod requirements.txt; do
          if [ -f "$file" ]; then
            echo "$file found"
          else
            echo "$file missing"
          fi
        done
        
        echo "File structure check completed"
        
    - name: Check code organization
      run: |
        echo "Checking code organization..."
        
        # Count Go files
        GO_FILES=$(find . -name "*.go" -not -path "./vendor/*" | wc -l)
        echo "Go files found: $GO_FILES"
        
        # Count Python files
        PYTHON_FILES=$(find . -name "*.py" -not -path "./venv/*" -not -path "./__pycache__/*" | wc -l)
        echo "Python files found: $PYTHON_FILES"
        
        # Count test files
        TEST_FILES=$(find . -name "*_test.go" -o -name "test_*.py" | wc -l)
        echo "Test files found: $TEST_FILES"
        
        # Check test coverage
        if [ "$TEST_FILES" -gt 0 ]; then
          echo "Test files present"
        else
          echo "No test files found"
        fi
        
    - name: Check documentation quality
      run: |
        echo "Checking documentation quality..."
        
        # Check README length
        if [ -f "README.md" ]; then
          README_LINES=$(wc -l < README.md)
          echo "README.md: $README_LINES lines"
          
          if [ "$README_LINES" -ge 100 ]; then
            echo "README.md is comprehensive"
          elif [ "$README_LINES" -ge 50 ]; then
            echo "README.md could be more detailed"
          else
            echo "README.md is too short"
          fi
          
          # Check for key sections
          if grep -q "## " README.md; then
            echo "README.md has proper section headers"
          else
            echo "README.md missing section headers"
          fi
        fi
        
        # Check for inline documentation
        if [ -f "go.mod" ]; then
          GO_COMMENTS=$(find . -name "*.go" -exec grep -c "//" {} + | awk '{sum+=$1} END {print sum}')
          echo "Go code comments: $GO_COMMENTS"
        fi
        
        if [ -f "requirements.txt" ]; then
          PYTHON_COMMENTS=$(find . -name "*.py" -exec grep -c "#" {} + | awk '{sum+=$1} END {print sum}')
          echo "Python code comments: $PYTHON_COMMENTS"
        fi

  code-style:
    name: Code Style Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Go code style
      run: |
        if [ -f "go.mod" ]; then
          echo "Checking Go code style..."
          
          # Check for common Go patterns
          if find . -name "*.go" | xargs grep -l "import (" | head -5; then
            echo "Go files have proper import statements"
          fi
          
          if find . -name "*.go" | xargs grep -l "func\|type\|var\|const" | head -5; then
            echo "Go files have basic syntax elements"
          fi
          
          # Check for obvious formatting issues
          if find . -name "*.go" | xargs grep -l "  " | head -3; then
            echo "Some Go files may have inconsistent indentation"
          else
            echo "Go files appear to have consistent formatting"
          fi
        else
          echo "No Go module found, skipping Go style checks"
        fi
        
    - name: Check Python code style
      run: |
        if [ -f "requirements.txt" ]; then
          echo "Checking Python code style..."
          
          # Check for common Python patterns
          if find . -name "*.py" | xargs grep -l "import\|def\|class" | head -5; then
            echo "Python files have basic syntax elements"
          fi
          
          # Check for obvious formatting issues
          if find . -name "*.py" | xargs grep -l "  " | head -3; then
            echo "Some Python files may have inconsistent indentation"
          else
            echo "Python files appear to have consistent formatting"
          fi
        else
          echo "No Python requirements found, skipping Python style checks"
        fi

  security-basic:
    name: Basic Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive files
      run: |
        echo "Performing basic security checks..."
        
        # Check for common sensitive file patterns
        SENSITIVE_FILES=$(find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name ".env*" | wc -l)
        echo "Sensitive files found: $SENSITIVE_FILES"
        
        if [ "$SENSITIVE_FILES" -eq 0 ]; then
          echo "No sensitive files found"
        else
          echo "Found potentially sensitive files"
          find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name ".env*"
        fi
        
        # Check for hardcoded secrets (basic check)
        SECRET_PATTERNS=$(grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude=*.md | grep -v "example\|test\|TODO" | wc -l)
        echo "Potential hardcoded secrets found: $SECRET_PATTERNS"
        
        if [ "$SECRET_PATTERNS" -eq 0 ]; then
          echo "No obvious hardcoded secrets found"
        else
          echo "Found potential hardcoded secrets"
          grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude=*.md | grep -v "example\|test\|TODO" | head -3
        fi

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [basic-quality, code-style, security-basic]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## Quality Assurance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Basic Quality: ${{ needs.basic-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Style: ${{ needs.code-style.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security-basic.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.basic-quality.result }}" = "success" ] && [ "${{ needs.code-style.result }}" = "success" ]; then
            echo "Basic quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "Some quality checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Note:" >> $GITHUB_STEP_SUMMARY
          echo "This is a basic quality workflow that doesn't require Go or Python tools." >> $GITHUB_STEP_SUMMARY
          echo "For comprehensive testing, use the full CI/CD pipeline when Go and Python are available." >> $GITHUB_STEP_SUMMARY
