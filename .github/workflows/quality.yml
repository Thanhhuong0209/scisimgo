name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * *' # Run every day at 6 AM UTC
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all tests including slow ones'
        required: false
        default: false
        type: boolean
      check_coverage:
        description: 'Check test coverage'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: '80'

jobs:
  go-quality:
    name: Go Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21, 1.22]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    - name: Verify Go installation
      run: |
        go version
        go env GOPATH
        go env GOROOT
    - name: Install Go tools
      run: |
        go install golang.org/x/lint/golint@latest || echo "Failed to install golint"
        go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest || echo "Failed to install shadow"
        go install honnef.co/go/tools/cmd/staticcheck@latest || echo "Failed to install staticcheck"
    - name: Run golint
      run: |
        if command -v golint >/dev/null 2>&1; then
          golint -set_exit_status ./... || echo "golint found issues, continuing..."
        else
          echo "golint not available, skipping..."
        fi
    - name: Run go vet
      run: |
        go vet ./... || echo "go vet found issues, continuing..."
    - name: Run shadow check
      run: |
        if command -v shadow >/dev/null 2>&1; then
          shadow ./... || echo "shadow found issues, continuing..."
        else
          echo "shadow not available, skipping..."
        fi
    - name: Run staticcheck
      run: |
        if command -v staticcheck >/dev/null 2>&1; then
          staticcheck ./... || echo "staticcheck found issues, continuing..."
        else
          echo "staticcheck not available, skipping..."
        fi
    - name: Check formatting
      run: |
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted with gofmt"
          gofmt -l .
          exit 1
        fi
        echo "Code formatting check passed"
    - name: Check complexity
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest || echo "Failed to install gocyclo"
        if command -v gocyclo >/dev/null 2>&1; then
          gocyclo -over 15 . || echo "Complexity check found issues, continuing..."
        else
          echo "gocyclo not available, skipping..."
        fi
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage-${{ matrix.go-version }}.out ./... || echo "Some tests failed, continuing..."
    - name: Check coverage
      if: ${{ inputs.check_coverage }}
      run: |
        if [ -f "coverage-${{ matrix.go-version }}.out" ]; then
          COVERAGE=$(go tool cover -func=coverage-${{ matrix.go-version }}.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
        else
          echo "No coverage file found"
        fi

  python-quality:
    name: Python Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Verify Python installation
      run: |
        python --version
        pip --version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "Some dependencies failed to install"
        pip install pytest pytest-cov flake8 black isort mypy bandit safety
    - name: Check formatting with black
      run: |
        black --check --diff notebooks/ scripts/ || echo "Format check failed, continuing..."
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff notebooks/ scripts/ || echo "Import sorting check failed, continuing..."
    - name: Lint with flake8
      run: |
        flake8 notebooks/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Critical linting errors found"
        flake8 notebooks/ scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Type checking with mypy
      run: |
        mypy notebooks/ scripts/ --ignore-missing-imports || echo "Type checking failed, continuing..."
    - name: Security check with bandit
      run: |
        bandit -r notebooks/ scripts/ || echo "Security check failed, continuing..."
    - name: Security check with safety
      run: |
        safety check || echo "Safety check failed, continuing..."
    - name: Run tests
      run: |
        pytest notebooks/ scripts/ --cov=notebooks --cov=scripts --cov-report=xml --cov-report=html || echo "Some tests failed, continuing..."
    - name: Check coverage
      if: ${{ inputs.check_coverage }}
      run: |
        if [ -f "coverage.xml" ]; then
          COVERAGE=$(grep -o 'line-rate="[^"]*"' coverage.xml | sed 's/line-rate="//;s/"//')
          echo "Coverage: $COVERAGE%"
          COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
          if (( $(echo "$COVERAGE_NUM < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
        else
          echo "No coverage file found"
        fi

  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: ${{ inputs.run_all_tests }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Run Go benchmarks
      run: |
        go test -bench=. -benchmem -benchtime=5s ./... > go-benchmarks.txt || echo "Go benchmarks failed"
        echo "Go Benchmark Results:" >> $GITHUB_STEP_SUMMARY
        cat go-benchmarks.txt >> $GITHUB_STEP_SUMMARY
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install Python performance tools
      run: |
        pip install pytest-benchmark memory-profiler line-profiler
    - name: Run Python benchmarks
      run: |
        pytest notebooks/ scripts/ --benchmark-only --benchmark-sort=name > python-benchmarks.txt || echo "Python benchmarks failed"
        echo "Python Benchmark Results:" >> $GITHUB_STEP_SUMMARY
        cat python-benchmarks.txt >> $GITHUB_STEP_SUMMARY
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          go-benchmarks.txt
          python-benchmarks.txt
        retention-days: 90

  code-metrics:
    name: Code Metrics
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install metrics tools
      run: |
        pip install radon mccabe
    - name: Calculate Go metrics
      run: |
        echo "Go Code Metrics:" >> $GITHUB_STEP_SUMMARY
        echo "Lines of Go code: $(find . -name "*.go" -not -path "./vendor/*" | xargs wc -l | tail -1)" >> $GITHUB_STEP_SUMMARY
        echo "Go files: $(find . -name "*.go" -not -path "./vendor/*" | wc -l)" >> $GITHUB_STEP_SUMMARY
    - name: Calculate Python metrics
      run: |
        echo "Python Code Metrics:" >> $GITHUB_STEP_SUMMARY
        echo "Lines of Python code: $(find . -name "*.py" -not -path "./venv/*" -not -path "./__pycache__/*" | xargs wc -l | tail -1)" >> $GITHUB_STEP_SUMMARY
        echo "Python files: $(find . -name "*.py" -not -path "./venv/*" -not -path "./__pycache__/*" | wc -l)" >> $GITHUB_STEP_SUMMARY
        if command -v radon >/dev/null 2>&1; then
          echo "Python complexity:" >> $GITHUB_STEP_SUMMARY
          radon cc notebooks/ scripts/ >> $GITHUB_STEP_SUMMARY || echo "Complexity analysis failed"
        fi

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [go-quality, python-quality, performance]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## Quality Assurance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.go-quality.result }}" = "success" ] && [ "${{ needs.python-quality.result }}" = "success" ]; then
            echo "All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "Some quality checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance.result }}" = "success" ]; then
            echo "Performance tests completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.performance.result }}" = "skipped" ]; then
            echo "Performance tests skipped (not requested)" >> $GITHUB_STEP_SUMMARY
          else
            echo "Performance tests failed" >> $GITHUB_STEP_SUMMARY
          fi
