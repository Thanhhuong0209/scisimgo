name: SciSimGo CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  # Basic Code Validation
  code-validation:
    name: Code Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file structure
      run: |
        echo "Checking project structure..."
        echo "Current directory: $(pwd)"
        echo "Files in root:"
        ls -la
        
        echo "Checking for required files..."
        if [ -f "README.md" ]; then
          echo "README.md found"
        else
          echo "ERROR: README.md not found"
          exit 1
        fi
        
        if [ -f "go.mod" ]; then
          echo "go.mod found"
        else
          echo "ERROR: go.mod not found"
          exit 1
        fi
        
        if [ -f "requirements.txt" ]; then
          echo "requirements.txt found"
        else
          echo "ERROR: requirements.txt not found"
          exit 1
        fi
        
        echo "Basic file structure validation passed"
        
    - name: Check Go module syntax
      run: |
        if [ -f "go.mod" ]; then
          echo "Validating go.mod syntax..."
          # Just check if the file can be parsed
          if grep -q "^module " go.mod; then
            echo "go.mod syntax appears valid"
          else
            echo "WARNING: go.mod may have syntax issues"
          fi
        else
          echo "No go.mod file found, skipping Go validation"
        fi
        
    - name: Check Python requirements
      run: |
        if [ -f "requirements.txt" ]; then
          echo "Checking requirements.txt format..."
          # Check if file has valid package names
          if grep -q "^[a-zA-Z]" requirements.txt; then
            echo "requirements.txt format appears valid"
          else
            echo "WARNING: requirements.txt may have format issues"
          fi
        else
          echo "No requirements.txt file found, skipping Python validation"
        fi

  # Documentation Check
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README
      run: |
        if [ ! -f "README.md" ]; then
          echo "ERROR: README.md not found"
          exit 1
        fi
        
        # Check for minimum content
        README_LINES=$(wc -l < README.md)
        echo "README.md has $README_LINES lines"
        
        if [ "$README_LINES" -lt 50 ]; then
          echo "WARNING: README.md seems too short (less than 50 lines)"
        else
          echo "README.md length is acceptable"
        fi
        
        # Check for basic sections
        if grep -q "## " README.md; then
          echo "README.md has proper section headers"
        else
          echo "WARNING: README.md may be missing section headers"
        fi
        
        echo "README.md check completed"
        
    - name: Check project structure documentation
      run: |
        echo "Checking project structure documentation..."
        
        # Check if directories exist and have content
        if [ -d "cmd" ]; then
          echo "cmd/ directory found"
          ls -la cmd/
        fi
        
        if [ -d "internal" ]; then
          echo "internal/ directory found"
          ls -la internal/
        fi
        
        if [ -d "notebooks" ]; then
          echo "notebooks/ directory found"
          ls -la notebooks/
        fi
        
        if [ -d "scripts" ]; then
          echo "scripts/ directory found"
          ls -la scripts/
        fi

  # Security Check
  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        
        # Check for common sensitive file patterns
        if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" | grep -q .; then
          echo "WARNING: Found potential key/certificate files"
          find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx"
        else
          echo "No sensitive key/certificate files found"
        fi
        
        # Check for environment files
        if find . -name ".env*" | grep -q .; then
          echo "WARNING: Found environment files"
          find . -name ".env*"
        else
          echo "No environment files found"
        fi
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude=*.md | grep -v "example\|test\|TODO" | head -5; then
          echo "WARNING: Found potential hardcoded secrets"
        else
          echo "No obvious hardcoded secrets found"
        fi

  # Code Quality Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Go code formatting
      run: |
        if [ -f "go.mod" ]; then
          echo "Checking Go code formatting..."
          
          # Check for common Go formatting issues
          if find . -name "*.go" | xargs grep -l "import (" | head -5; then
            echo "Found Go files with imports"
          fi
          
          # Check for obvious syntax issues
          if find . -name "*.go" | xargs grep -l "func\|type\|var\|const" | head -5; then
            echo "Found Go files with basic syntax elements"
          fi
        else
          echo "No Go module found, skipping Go code checks"
        fi
        
    - name: Check Python code formatting
      run: |
        if [ -f "requirements.txt" ]; then
          echo "Checking Python code formatting..."
          
          # Check for common Python patterns
          if find . -name "*.py" | xargs grep -l "import\|def\|class" | head -5; then
            echo "Found Python files with basic syntax elements"
          fi
        else
          echo "No Python requirements found, skipping Python code checks"
        fi

  # Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-validation, documentation, security, code-quality]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Validation: ${{ needs.code-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.documentation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.code-validation.result }}" = "success" ] && [ "${{ needs.documentation.result }}" = "success" ]; then
            echo "Basic validation passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "Some validation checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Note: This is a basic validation workflow. Full testing requires Go and Python environments." >> $GITHUB_STEP_SUMMARY
