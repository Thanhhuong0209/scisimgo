name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  version:
    name: Version Management
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Release version: $VERSION"
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z[-prerelease][+build]"
          exit 1
        fi
        echo "Version format is valid: $VERSION"

  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [version]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Generate changelog
      run: |
        VERSION="${{ needs.version.outputs.version }}"
        VERSION_NUM="${VERSION#v}"
        
        echo "# Changelog for $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Release Date: $(date -u +'%Y-%m-%d')" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --oneline --no-merges "$PREVIOUS_TAG..HEAD" | while read commit; do
            echo "- $commit" >> CHANGELOG.md
          done
        else
          echo "## Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --oneline --no-merges | while read commit; do
            echo "- $commit" >> CHANGELOG.md
          done
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- Scientific simulation engine in Go" >> CHANGELOG.md
        echo "- SIR disease model simulation" >> CHANGELOG.md
        echo "- Predator-Prey ecosystem simulation" >> CHANGELOG.md
        echo "- Orbital mechanics simulation" >> CHANGELOG.md
        echo "- Data export and analysis pipeline" >> CHANGELOG.md
        echo "- Comprehensive CI/CD workflows" >> CHANGELOG.md
        
        echo "Changelog generated successfully"
        cat CHANGELOG.md
    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: CHANGELOG.md
        retention-days: 90

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, changelog]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog
        path: ./
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: ${{ needs.version.result == 'success' }}
      with:
        tag_name: ${{ needs.version.outputs.version }}
        name: "Release ${{ needs.version.outputs.version }}"
        body_path: CHANGELOG.md
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [version, release]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## Release Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "Release ${{ needs.version.outputs.version }} created successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Release Details" >> $GITHUB_STEP_SUMMARY
            echo "- Version: ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- Type: ${{ github.event.inputs.release_type || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Draft: ${{ github.event.inputs.draft && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Pre-release: ${{ github.event.inputs.prerelease && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "Release creation failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Note:" >> $GITHUB_STEP_SUMMARY
          echo "This is a basic release workflow that creates GitHub releases with changelogs." >> $GITHUB_STEP_SUMMARY
          echo "For full builds and artifacts, use the comprehensive CI/CD pipeline when Go and Python are available." >> $GITHUB_STEP_SUMMARY
