name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  # Version Management
  version:
    name: Version Management
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install versioning tools
      run: |
        pip install semver bump2version
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Update version files
      run: |
        echo "Updating version files..."
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update go.mod if it exists
        if [ -f "go.mod" ]; then
          sed -i "s/^module.*/module github.com\/scisimgo v$VERSION/" go.mod
        fi
        
        # Update requirements.txt if it exists
        if [ -f "requirements.txt" ]; then
          echo "# SciSimGo v$VERSION" > requirements.txt.new
          echo "# Generated on $(date)" >> requirements.txt.new
          echo "" >> requirements.txt.new
          cat requirements.txt | grep -v "^#" >> requirements.txt.new
          mv requirements.txt.new requirements.txt
        fi
        
        # Create version.txt
        echo "$VERSION" > version.txt
        echo "Build date: $(date)" >> version.txt
        echo "Commit: ${{ github.sha }}" >> version.txt
        
    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        
    - name: Create tag
      run: |
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"

  # Build Release
  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: "v${{ needs.version.outputs.version }}"
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Build Go binaries
      run: |
        echo "Building Go binaries..."
        mkdir -p dist
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o dist/sir-simulator-linux-amd64 ./cmd/sir-simulator
        GOOS=linux GOARCH=arm64 go build -o dist/sir-simulator-linux-arm64 ./cmd/sir-simulator
        GOOS=windows GOARCH=amd64 go build -o dist/sir-simulator-windows-amd64.exe ./cmd/sir-simulator
        GOOS=darwin GOARCH=amd64 go build -o dist/sir-simulator-darwin-amd64 ./cmd/sir-simulator
        
        GOOS=linux GOARCH=amd64 go build -o dist/predator-prey-linux-amd64 ./cmd/predator-prey
        GOOS=linux GOARCH=arm64 go build -o dist/predator-prey-linux-arm64 ./cmd/predator-prey
        GOOS=windows GOARCH=amd64 go build -o dist/predator-prey-windows-amd64.exe ./cmd/predator-prey
        GOOS=darwin GOARCH=amd64 go build -o dist/predator-prey-darwin-amd64 ./cmd/predator-prey
        
        GOOS=linux GOARCH=amd64 go build -o dist/orbital-sim-linux-amd64 ./cmd/orbital-sim
        GOOS=linux GOARCH=arm64 go build -o dist/orbital-sim-linux-arm64 ./cmd/orbital-sim
        GOOS=windows GOARCH=amd64 go build -o dist/orbital-sim-windows-amd64.exe ./cmd/orbital-sim
        GOOS=darwin GOARCH=amd64 go build -o dist/orbital-sim-darwin-amd64 ./cmd/orbital-sim
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        cd ..
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Create Python package
      run: |
        echo "Creating Python package..."
        mkdir -p dist/python
        
        # Copy Python files
        cp -r notebooks dist/python/
        cp -r scripts dist/python/
        cp requirements.txt dist/python/
        cp version.txt dist/python/
        
        # Create Python package archive
        cd dist/python
        tar -czf ../scisimgo-python-${{ needs.version.outputs.version }}.tar.gz .
        cd ../..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-builds
        path: dist/
        retention-days: 90

  # Generate Changelog
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install changelog tools
      run: |
        pip install conventional-changelog
        
    - name: Generate changelog
      run: |
        echo "Generating changelog..."
        VERSION="${{ needs.version.outputs.version }}"
        
        # Create changelog from git commits
        echo "# Changelog for SciSimGo v$VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Release Date: $(date)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --oneline --no-merges "$PREVIOUS_TAG..HEAD" >> CHANGELOG.md
        else
          echo "## Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --oneline --no-merges >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- Scientific simulation engine in Go" >> CHANGELOG.md
        echo "- SIR disease model simulation" >> CHANGELOG.md
        echo "- Predator-Prey ecosystem simulation" >> CHANGELOG.md
        echo "- Orbital mechanics simulation" >> CHANGELOG.md
        echo "- Data export and analysis pipeline" >> CHANGELOG.md
        echo "- Comprehensive testing and CI/CD" >> CHANGELOG.md
        
    - name: Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: changelog
        path: CHANGELOG.md
        retention-days: 90

  # Create Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, changelog]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-builds
        path: dist/
        
    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog
        path: ./
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.version.outputs.version }}"
        name: "SciSimGo v${{ needs.version.outputs.version }}"
        body_path: CHANGELOG.md
        files: |
          dist/*.exe
          dist/*.tar.gz
          dist/checksums.txt
        draft: ${{ github.event.inputs.draft || false }}
        prerelease: ${{ github.event.inputs.prerelease || false }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify Release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
    - name: Release notification
      run: |
        echo "# Release Notification" >> $GITHUB_STEP_SUMMARY
        echo "Date: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.release.result }}" = "success" ]; then
          echo "Release v${{ needs.version.outputs.version }} created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- Version: v${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: v${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ github.event.inputs.draft && 'Draft' || 'Published' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release: ${{ github.event.inputs.prerelease && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "Release creation failed!" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
        fi
