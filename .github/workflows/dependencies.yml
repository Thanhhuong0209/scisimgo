name: Dependency Management & Security

on:
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      check_dependencies:
        description: 'Check dependencies for issues'
        required: false
        default: true
        type: boolean
      security_only:
        description: 'Security scan only'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Go module
      run: |
        if [ -f "go.mod" ]; then
          echo "Checking Go module dependencies..."
          echo "Go module found: $(cat go.mod | head -1)"
          
          # Check for obvious issues in go.mod
          if grep -q "replace" go.mod; then
            echo "⚠️  Found replace directives in go.mod"
          else
            echo "✅ No replace directives found"
          fi
          
          if grep -q "exclude" go.mod; then
            echo "⚠️  Found exclude directives in go.mod"
          else
            echo "✅ No exclude directives found"
          fi
        else
          echo "No go.mod file found"
        fi
        
    - name: Check Python requirements
      run: |
        if [ -f "requirements.txt" ]; then
          echo "Checking Python requirements..."
          echo "Requirements file found with $(wc -l < requirements.txt) lines"
          
          # Check for obvious issues
          if grep -q "==" requirements.txt; then
            echo "✅ Found version pinning (==)"
          else
            echo "⚠️  No version pinning found"
          fi
          
          if grep -q ">=" requirements.txt; then
            echo "⚠️  Found loose version constraints (>="
          else
            echo "✅ No loose version constraints found"
          fi
        else
          echo "No requirements.txt file found"
        fi

  security-basic:
    name: Basic Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for common security issues
      run: |
        echo "Performing basic security checks..."
        
        # Check for hardcoded secrets
        SECRET_COUNT=$(grep -r "password\|secret\|key\|token\|api_key\|private_key" . --exclude-dir=.git --exclude=*.md | grep -v "example\|test\|TODO\|password123\|secret123" | wc -l)
        echo "Potential hardcoded secrets found: $SECRET_COUNT"
        
        if [ "$SECRET_COUNT" -eq 0 ]; then
          echo "✅ No obvious hardcoded secrets found"
        else
          echo "⚠️  Found potential hardcoded secrets"
          grep -r "password\|secret\|key\|token\|api_key\|private_key" . --exclude-dir=.git --exclude=*.md | grep -v "example\|test\|TODO\|password123\|secret123" | head -3
        fi
        
        # Check for sensitive files
        SENSITIVE_FILES=$(find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name ".env*" -o -name "config.local.*" | wc -l)
        echo "Sensitive files found: $SENSITIVE_FILES"
        
        if [ "$SENSITIVE_FILES" -eq 0 ]; then
          echo "✅ No sensitive files found"
        else
          echo "⚠️  Found potentially sensitive files"
          find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name ".env*" -o -name "config.local.*"
        fi
        
        # Check for executable files
        EXEC_FILES=$(find . -type f -executable | grep -v ".git" | wc -l)
        echo "Executable files found: $EXEC_FILES"
        
        if [ "$EXEC_FILES" -eq 0 ]; then
          echo "✅ No unexpected executable files found"
        else
          echo "⚠️  Found executable files"
          find . -type f -executable | grep -v ".git" | head -5
        fi

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for license files
      run: |
        echo "Checking for license files..."
        
        # Check for common license files
        for license_file in LICENSE LICENSE.txt LICENSE.md COPYING; do
          if [ -f "$license_file" ]; then
            echo "✅ Found license file: $license_file"
            echo "   First few lines:"
            head -5 "$license_file"
          fi
        done
        
        # Check for license in README
        if [ -f "README.md" ]; then
          if grep -i "license\|licence" README.md | head -3; then
            echo "✅ License information found in README"
          else
            echo "⚠️  No license information found in README"
          fi
        fi
        
        # Check for license in go.mod
        if [ -f "go.mod" ]; then
          if grep -i "license" go.mod; then
            echo "✅ License information found in go.mod"
          else
            echo "⚠️  No license information found in go.mod"
          fi
        fi

  dependency-summary:
    name: Dependency Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, security-basic, license-check]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Check: ${{ needs.security-basic.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.dependency-check.result }}" = "success" ] && [ "${{ needs.security-basic.result }}" = "success" ]; then
            echo "✅ Basic dependency checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Some dependency checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Note:" >> $GITHUB_STEP_SUMMARY
          echo "This is a basic dependency workflow that doesn't require Go or Python tools." >> $GITHUB_STEP_SUMMARY
          echo "For comprehensive dependency analysis, use the full CI/CD pipeline when Go and Python are available." >> $GITHUB_STEP_SUMMARY
